image: "rust:latest"

build:cargo:
  script:
    - rustc --version && cargo --version
    - rustup component add rustfmt clippy
    - cargo fmt -- --check
    - cargo clippy -- -D warnings

test:junit-report:
   services:
    - postgres:latest
   variables:
     POSTGRES_PASSWORD: postgres
     DATABASE_URL: postgres://postgres:postgres@postgres:5432/heiwa
   script:
     - sudo apt-get update && sudo apt-get -y install libpq-dev
     - rustup install nightly && rustup default nightly
     - cargo install diesel_cli --no-default-features --features postgres
     - diesel setup
     - cargo install junitify
     - cargo test -- --format=json -Z unstable-options --report-time | junitify --out $CI_PROJECT_DIR/tests/
   artifacts:
     when: always
     reports:
       junit: $CI_PROJECT_DIR/tests/*.xml

test:coverage:
  image: "rustdocker/rust:nightly"
  needs: ["test:junit-report"]
  cache:
    paths: [ '/root/.cargo', '/root/.cache', './target' ]
  script:
    - apt-get update && apt-get install -yqq --no-install-recommends python3-pip python3-setuptools lcov
    - rustup component add llvm-tools-preview
    - (cargo test -- -Z unstable-options) || true
    # generate html report
    - cargo install grcov
    - grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --ignore "*cargo*" --ignore "*main*" -o ./coverage/
    # generate cobertura report for gitlab integration
    - pip3 install lcov_cobertura
    - grcov . --binary-path ./target/debug/ -s . -t lcov --llvm --branch --ignore-not-existing --ignore "*cargo*" --ignore "*main*" -o coverage.lcov
    - lcov --summary coverage.lcov
    - lcov_cobertura coverage.lcov
  coverage: '/\s*lines\.*:\s*([\d\.]+%)/'
  artifacts:
    paths:
      - 'coverage'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


#deploy:
#  stage: deploy
#  script: echo "Define your deployment script!"
#  environment: production
